---
import AboutCollapseSection from "../../components/AboutCollapseSection.astro";
import AboutLayout from "../../layouts/AboutLayout.astro";
const AboutSections = await Astro.glob('./content/*.md');

---

<AboutLayout>
  <h1>About <span class="text-emerald-500 dark:text-amber-500 font-display tracking-wide inline-block rotate-6">*me*</span></h1>
  <p class="font-thin opacity-70 text-xl  2xl:text-3xl">
    What would like to know more about?
  </p>

  {AboutSections.sort((a,b) => a.frontmatter.order < b.frontmatter.order ? -1 : 1).map((section, index) => 
      <AboutCollapseSection title={section.frontmatter.title} key={index}>
        <section.Content />
      </AboutCollapseSection>)
  }

</AboutLayout>

<script>
  const buttons = [
    ...document.querySelectorAll("[data-collapse-button]"),
  ] as HTMLButtonElement[];

  for (const button of buttons) {
    if (
      [
        ...document.querySelectorAll(
          `[data-collapse='${button.dataset.target}']`
        ),
      ].length > 1
    ) {
      throw new Error(
        `Error, multiple collapse section have the same key ${button.dataset.target}`
      );
    }

    const collapseElement = document.querySelector(
      `[data-collapse='${button.dataset.target}']`
    ) as HTMLDivElement;

    const rotateElement = document.querySelector(
      `[data-rotate='${button.dataset.target}']`
    ) as HTMLDivElement;

    // We set the initial max-height, otherwise the animation won't work
    collapseElement.classList.toggle(`max-h-0`);

    button.addEventListener("click", () => {
      collapseElement.classList.toggle(
        `max-h-[${collapseElement.scrollHeight}px]`
      );
      collapseElement.classList.toggle("max-h-0");
      rotateElement.classList.toggle("rotate-90");
      rotateElement.classList.toggle("rotate-0");
    });
  }
</script>
